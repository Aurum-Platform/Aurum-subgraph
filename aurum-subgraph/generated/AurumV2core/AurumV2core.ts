// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Borrow extends ethereum.Event {
  get params(): Borrow__Params {
    return new Borrow__Params(this);
  }
}

export class Borrow__Params {
  _event: Borrow;

  constructor(event: Borrow) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get loanId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get duration(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Deposition extends ethereum.Event {
  get params(): Deposition__Params {
    return new Deposition__Params(this);
  }
}

export class Deposition__Params {
  _event: Deposition;

  constructor(event: Deposition) {
    this._event = event;
  }

  get depoId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Repay extends ethereum.Event {
  get params(): Repay__Params {
    return new Repay__Params(this);
  }
}

export class Repay__Params {
  _event: Repay;

  constructor(event: Repay) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get loanId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get interest(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Withdrawal extends ethereum.Event {
  get params(): Withdrawal__Params {
    return new Withdrawal__Params(this);
  }
}

export class Withdrawal__Params {
  _event: Withdrawal;

  constructor(event: Withdrawal) {
    this._event = event;
  }

  get depoId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AurumV2core__depositsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getLender(): Address {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }

  getLastUpdateTimestamp(): BigInt {
    return this.value2;
  }
}

export class AurumV2core__loansResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    return map;
  }

  getBorrower(): Address {
    return this.value0;
  }

  getTokenContract(): Address {
    return this.value1;
  }

  getTokenId(): BigInt {
    return this.value2;
  }

  getAmount(): BigInt {
    return this.value3;
  }

  getCollateralValue(): BigInt {
    return this.value4;
  }

  getLastUpdateTimestamp(): BigInt {
    return this.value5;
  }

  getDuration(): BigInt {
    return this.value6;
  }

  getIsActive(): boolean {
    return this.value7;
  }
}

export class AurumV2core extends ethereum.SmartContract {
  static bind(address: Address): AurumV2core {
    return new AurumV2core("AurumV2core", address);
  }

  aurumClientContract(): Address {
    let result = super.call(
      "aurumClientContract",
      "aurumClientContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_aurumClientContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "aurumClientContract",
      "aurumClientContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  borrowInterestRate(): BigInt {
    let result = super.call(
      "borrowInterestRate",
      "borrowInterestRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_borrowInterestRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowInterestRate",
      "borrowInterestRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deposits(param0: Address, param1: BigInt): AurumV2core__depositsResult {
    let result = super.call(
      "deposits",
      "deposits(address,uint256):(address,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new AurumV2core__depositsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_deposits(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<AurumV2core__depositsResult> {
    let result = super.tryCall(
      "deposits",
      "deposits(address,uint256):(address,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AurumV2core__depositsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getCollateralValue(tokenContract_: Address, tokenId_: BigInt): BigInt {
    let result = super.call(
      "getCollateralValue",
      "getCollateralValue(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenContract_),
        ethereum.Value.fromUnsignedBigInt(tokenId_)
      ]
    );

    return result[0].toBigInt();
  }

  try_getCollateralValue(
    tokenContract_: Address,
    tokenId_: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollateralValue",
      "getCollateralValue(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenContract_),
        ethereum.Value.fromUnsignedBigInt(tokenId_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEthToUsdPrice(): BigInt {
    let result = super.call(
      "getEthToUsdPrice",
      "getEthToUsdPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getEthToUsdPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEthToUsdPrice",
      "getEthToUsdPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNFTPrice(_tokenContract: Address, tokenId: BigInt): BigInt {
    let result = super.call(
      "getNFTPrice",
      "getNFTPrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenContract),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getNFTPrice(
    _tokenContract: Address,
    tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNFTPrice",
      "getNFTPrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenContract),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUtilization(): BigInt {
    let result = super.call("getUtilization", "getUtilization():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getUtilization(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUtilization",
      "getUtilization():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lendingInterestRate(): BigInt {
    let result = super.call(
      "lendingInterestRate",
      "lendingInterestRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lendingInterestRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lendingInterestRate",
      "lendingInterestRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loans(param0: Address, param1: BigInt): AurumV2core__loansResult {
    let result = super.call(
      "loans",
      "loans(address,uint256):(address,address,uint256,uint256,uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new AurumV2core__loansResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBoolean()
    );
  }

  try_loans(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<AurumV2core__loansResult> {
    let result = super.tryCall(
      "loans",
      "loans(address,uint256):(address,address,uint256,uint256,uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AurumV2core__loansResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBoolean()
      )
    );
  }

  maxLoanToValue(): BigInt {
    let result = super.call("maxLoanToValue", "maxLoanToValue():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxLoanToValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxLoanToValue",
      "maxLoanToValue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalBorrowed(): BigInt {
    let result = super.call("totalBorrowed", "totalBorrowed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalBorrowed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBorrowed",
      "totalBorrowed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalDepositedNFTs(): BigInt {
    let result = super.call(
      "totalDepositedNFTs",
      "totalDepositedNFTs():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalDepositedNFTs(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDepositedNFTs",
      "totalDepositedNFTs():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userCollateralBalance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "userCollateralBalance",
      "userCollateralBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_userCollateralBalance(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userCollateralBalance",
      "userCollateralBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userColleteralNum(param0: Address): BigInt {
    let result = super.call(
      "userColleteralNum",
      "userColleteralNum(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userColleteralNum(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userColleteralNum",
      "userColleteralNum(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userDepositNum(param0: Address): BigInt {
    let result = super.call(
      "userDepositNum",
      "userDepositNum(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userDepositNum(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userDepositNum",
      "userDepositNum(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get borrowInterestRate_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get lendingInterestRate_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get maxLoanToValue_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get amount_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenContract_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get duration_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }
}

export class DepositToPoolCall extends ethereum.Call {
  get inputs(): DepositToPoolCall__Inputs {
    return new DepositToPoolCall__Inputs(this);
  }

  get outputs(): DepositToPoolCall__Outputs {
    return new DepositToPoolCall__Outputs(this);
  }
}

export class DepositToPoolCall__Inputs {
  _call: DepositToPoolCall;

  constructor(call: DepositToPoolCall) {
    this._call = call;
  }
}

export class DepositToPoolCall__Outputs {
  _call: DepositToPoolCall;

  constructor(call: DepositToPoolCall) {
    this._call = call;
  }
}

export class GetCollateralValueCall extends ethereum.Call {
  get inputs(): GetCollateralValueCall__Inputs {
    return new GetCollateralValueCall__Inputs(this);
  }

  get outputs(): GetCollateralValueCall__Outputs {
    return new GetCollateralValueCall__Outputs(this);
  }
}

export class GetCollateralValueCall__Inputs {
  _call: GetCollateralValueCall;

  constructor(call: GetCollateralValueCall) {
    this._call = call;
  }

  get tokenContract_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class GetCollateralValueCall__Outputs {
  _call: GetCollateralValueCall;

  constructor(call: GetCollateralValueCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GetNFTPriceCall extends ethereum.Call {
  get inputs(): GetNFTPriceCall__Inputs {
    return new GetNFTPriceCall__Inputs(this);
  }

  get outputs(): GetNFTPriceCall__Outputs {
    return new GetNFTPriceCall__Outputs(this);
  }
}

export class GetNFTPriceCall__Inputs {
  _call: GetNFTPriceCall;

  constructor(call: GetNFTPriceCall) {
    this._call = call;
  }

  get _tokenContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class GetNFTPriceCall__Outputs {
  _call: GetNFTPriceCall;

  constructor(call: GetNFTPriceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get loanId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }
}

export class SetAurumClienCall extends ethereum.Call {
  get inputs(): SetAurumClienCall__Inputs {
    return new SetAurumClienCall__Inputs(this);
  }

  get outputs(): SetAurumClienCall__Outputs {
    return new SetAurumClienCall__Outputs(this);
  }
}

export class SetAurumClienCall__Inputs {
  _call: SetAurumClienCall;

  constructor(call: SetAurumClienCall) {
    this._call = call;
  }

  get aurumClientContract_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAurumClienCall__Outputs {
  _call: SetAurumClienCall;

  constructor(call: SetAurumClienCall) {
    this._call = call;
  }
}

export class SetBorrowInterestRateCall extends ethereum.Call {
  get inputs(): SetBorrowInterestRateCall__Inputs {
    return new SetBorrowInterestRateCall__Inputs(this);
  }

  get outputs(): SetBorrowInterestRateCall__Outputs {
    return new SetBorrowInterestRateCall__Outputs(this);
  }
}

export class SetBorrowInterestRateCall__Inputs {
  _call: SetBorrowInterestRateCall;

  constructor(call: SetBorrowInterestRateCall) {
    this._call = call;
  }

  get borrowInterestRate_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBorrowInterestRateCall__Outputs {
  _call: SetBorrowInterestRateCall;

  constructor(call: SetBorrowInterestRateCall) {
    this._call = call;
  }
}

export class SetLoanToValueCall extends ethereum.Call {
  get inputs(): SetLoanToValueCall__Inputs {
    return new SetLoanToValueCall__Inputs(this);
  }

  get outputs(): SetLoanToValueCall__Outputs {
    return new SetLoanToValueCall__Outputs(this);
  }
}

export class SetLoanToValueCall__Inputs {
  _call: SetLoanToValueCall;

  constructor(call: SetLoanToValueCall) {
    this._call = call;
  }

  get maxLoanToValue_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLoanToValueCall__Outputs {
  _call: SetLoanToValueCall;

  constructor(call: SetLoanToValueCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawFromPoolCall extends ethereum.Call {
  get inputs(): WithdrawFromPoolCall__Inputs {
    return new WithdrawFromPoolCall__Inputs(this);
  }

  get outputs(): WithdrawFromPoolCall__Outputs {
    return new WithdrawFromPoolCall__Outputs(this);
  }
}

export class WithdrawFromPoolCall__Inputs {
  _call: WithdrawFromPoolCall;

  constructor(call: WithdrawFromPoolCall) {
    this._call = call;
  }

  get depositId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawFromPoolCall__Outputs {
  _call: WithdrawFromPoolCall;

  constructor(call: WithdrawFromPoolCall) {
    this._call = call;
  }
}

export class WithdrawLiquidatedNFTCall extends ethereum.Call {
  get inputs(): WithdrawLiquidatedNFTCall__Inputs {
    return new WithdrawLiquidatedNFTCall__Inputs(this);
  }

  get outputs(): WithdrawLiquidatedNFTCall__Outputs {
    return new WithdrawLiquidatedNFTCall__Outputs(this);
  }
}

export class WithdrawLiquidatedNFTCall__Inputs {
  _call: WithdrawLiquidatedNFTCall;

  constructor(call: WithdrawLiquidatedNFTCall) {
    this._call = call;
  }

  get borrowerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _loanId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawLiquidatedNFTCall__Outputs {
  _call: WithdrawLiquidatedNFTCall;

  constructor(call: WithdrawLiquidatedNFTCall) {
    this._call = call;
  }
}
